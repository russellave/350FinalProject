DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0000 : 00101001110000000000000000000001; --   addi $r7, $r0, 1 #dummy screen code

0001 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0002 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0003 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0004 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0005 : 00000010100011100100000000001000; --   and $r10, $r7, $r4  #is dummy code

0006 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0007 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0008 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0009 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0010 : 00010010100000000000000000100010; -- 	bne $r10, $r0, check_dummy_input #process screen change

0011 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0012 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0013 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0014 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0015 : 01000000110000000000000000000010; -- 	lw $r3, 2($r0) #check controller input

0016 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0017 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0018 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0019 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0020 : 00010000000001100000000000000101; -- 	bne $r0, $r3, splash_transition

0021 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0022 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0023 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0024 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0025 : 00001000000000000000000000000000; --   j main #stay on screen until value is inputted

0026 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0027 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0028 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0029 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0030 : 00101001000000000000000000000001; --   addi $r4, $r0, 1 #update screen to dummy screen

0031 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0032 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0033 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0034 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0035 : 00111001000000000000000000000011; --   sw $r4, 3($r0) #output new screen to verilog

0036 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0037 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0038 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0039 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0040 : 00001000000000000000000000000000; --   j main #main will process the new screen

0041 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0042 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0043 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0044 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0045 : 01000000110000000000000000000010; -- 	lw $r3, 2($r0) controller input  	#Find controller input

0046 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0047 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0048 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0049 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0050 : 00101001110000000000000000000001; --   addi $r7, $r0, 1 #back mode code for controller #not important for dummy screen

0051 : 00101010000000000000000000000010; --   addi $r8, $r0, 2 #save mode code for controller

0052 : 00101010010000000000000000000100; --   addi $r9, $r0, 4 #load mode code for controller

0053 : 00101010100000000000000000001000; --   addi $r10 $r0, 8 #play mode code for controller

0054 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0055 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0056 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0057 : 00000000000000000000000000000000; --   addi $r0, $r0, 0

0058 : 00000010110001101000000000001000; --   and $r11, $r3, $r8

0059 : 00010010110000000000000000000100; --   bne $r11, $r0, save_pattern

0060 : 00000011000001101001000000001000; --   and $r12, $r3, $r9

0061 : 00010011000000000000000000100110; --   bne $r12, $r0, load_pattern

0062 : 00000011010001101010000000001000; --   and $r13, $r3, $r10

0063 : 00010011010000000000000000100100; --   bne $r13, $r0, play_game

0064 : 00101001000000000000000000000010; --   addi $r4, $r0, 2 #update screen in processor

0065 : 00111001000000000000000000000011; --   sw $r4, 3($r0) #output new screen to verilog

0066 : 01000000110000000000000000000010; --   lw $r3, 2($r0) #controller input

0067 : 00010000110000000000000000000000; --   bne $r3, $r0, rest_of_save_pattern #so that $r3 value isn't overwritten

0068 : 01000000010000000000000000000000; --   lw $r1, 0($r0) #sensor input

0069 : 00101111010000000000000000000000; --   addi $r29, $r0, 0 #counter for save pattern

0070 : 00101011110000000000000000000001; --   addi $r15, $r0, 1 #back button/end saving

0071 : 00101100000000000000000000000010; --   addi $r16, $r0, 2 #save first location

0072 : 00101100010000000000000000000100; --   addi $r17, $r0, 4 #save second location

0073 : 00101100100000000000000000001000; --   addi $r18, $r0, 8 #save third location

0074 : 00000011110001101111000000001000; --   and $r15, $r3, $r15

0075 : 00010011110000011111111111001110; --   bne $r15, $r0, splash_transition #back button hit, go to dummy screen

0076 : 00000100111000110010000000001100; --   or $r19, $r17, $r18

0077 : 00000100111000010011000000001100; --   or $r19, $r16, $r19

0078 : 00000100001001100011000000001000; --   and $r16, $r19, $r3

0079 : 00000101001001100001000000001000; --   and $r20, $r19, $r1 #selected valid save location and sensor input present

0080 : 00010101000000000000000000000001; --   bne $r20, $r0, save_hit

0081 : 00001000000000000000000001000100; -- 	j rest_of_save_pattern

0082 : 00000101000001110000000000001000; --   and $r20, $r3, $r16 #check if controller is first save location

0083 : 00000101010001110001000000001000; --   and $r21, $r3, $r17

0084 : 00000101100001110010000000001000; --   and $r22, $r3, $r18

0085 : 00010000001010000000000000000010; --   bne $r0, $r20, save_first_location

0086 : 00010000001010100000000000000100; --   bne $r0, $r21, save_second_location

0087 : 00010000001011000000000000000110; --   bne $r0, $r22, save_third_location

0088 : 00111000011110100000000111110100; --   sw $r1, 500($29)

0089 : 00101111011110100000000000000001; --   addi $r29, $r29, 1 #incrememnt counter

0090 : 00001000000000000000000001000100; --   j rest_of_save_pattern

0091 : 00111000011110100000001111101000; --   sw $r1, 1000($29)

0092 : 00101111011110100000000000000001; --   addi $r29, $r29, 1 #incrememnt counter

0093 : 00001000000000000000000001000100; --   j rest_of_save_pattern

0094 : 00111000011001100000010111011100; --   sw $r1, 1500($19)

0095 : 00101100111001100000000000000001; --   addi $r19, $r19, 1 #incrememnt counter

0096 : 00001000000000000000000001000000; --   j save_pattern

0097 : 00111000011110100000010111011100; --   sw $r1, 1500($29)

0098 : 00101111011110100000000000000001; --   addi $r29, $r29, 1 #incrememnt counter

0099 : 00001000000000000000000001000100; --   j rest_of_save_pattern

[0100..4095] : 00000000000000000000000000000000;
END;
